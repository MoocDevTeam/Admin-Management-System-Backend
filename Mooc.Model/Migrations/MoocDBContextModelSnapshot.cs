// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mooc.Model.DBContext;

#nullable disable

namespace Mooc.Model.Migrations
{
    [DbContext(typeof(MoocDBContext))]
    partial class MoocDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.ChoiceQuestion", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatedByUserId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Marks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionBody")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long>("QuestionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("QuestionTypeId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("UpdatedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedByUserId1");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("QuestionTypeId1");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ChoiceQuestion", null, t =>
                        {
                            t.HasCheckConstraint("CK_ChoiceQuestion_Marks", "[Marks] >= 0 AND [Marks] <= 100");
                        });
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.JudgementQuestion", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CorrectAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<long>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatedByUserId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Marks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionBody")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long>("QuestionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("QuestionTypeId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("UpdatedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedByUserId1");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("QuestionTypeId1");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("JudgementQuestion", null, t =>
                        {
                            t.HasCheckConstraint("CK_JudgementQuestionn_Marks", "[Marks] >= 0 AND [Marks] <= 100");
                        });
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.Option", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChoiceQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChoiceQuestionId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatedByUserId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorExplanation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Field")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("OptionOrder")
                        .HasMaxLength(1)
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("UpdatedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceQuestionId");

                    b.HasIndex("ChoiceQuestionId1");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedByUserId1");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Option", (string)null);
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.QuestionType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.ShortAnsQuestion", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CreatedByUserId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Marks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionBody")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long>("QuestionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("QuestionTypeId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceAnswer")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("UpdatedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedByUserId1");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("QuestionTypeId1");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ShortAnsQuestion", null, t =>
                        {
                            t.HasCheckConstraint("CK_ShortAnsQuestion_Marks", "[Marks] >= 0 AND [Marks] <= 100");
                        });
                });

            modelBuilder.Entity("Mooc.Model.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Avatar")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ChoiceQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("JudgementQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ShortAnsQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceQuestionId");

                    b.HasIndex("JudgementQuestionId");

                    b.HasIndex("OptionId");

                    b.HasIndex("ShortAnsQuestionId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.ChoiceQuestion", b =>
                {
                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId1");

                    b.HasOne("Mooc.Model.Entity.ExamManagement.QuestionType", null)
                        .WithMany("ChoiceQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.ExamManagement.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId1");

                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.JudgementQuestion", b =>
                {
                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId1");

                    b.HasOne("Mooc.Model.Entity.ExamManagement.QuestionType", null)
                        .WithMany("JudgementQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.ExamManagement.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId1");

                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.Option", b =>
                {
                    b.HasOne("Mooc.Model.Entity.ExamManagement.ChoiceQuestion", null)
                        .WithMany()
                        .HasForeignKey("ChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.ExamManagement.ChoiceQuestion", "ChoiceQuestion")
                        .WithMany("Option")
                        .HasForeignKey("ChoiceQuestionId1");

                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId1");

                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChoiceQuestion");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.ShortAnsQuestion", b =>
                {
                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId1");

                    b.HasOne("Mooc.Model.Entity.ExamManagement.QuestionType", null)
                        .WithMany("ShortAnsQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mooc.Model.Entity.ExamManagement.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId1");

                    b.HasOne("Mooc.Model.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Mooc.Model.Entity.User", b =>
                {
                    b.HasOne("Mooc.Model.Entity.ExamManagement.ChoiceQuestion", null)
                        .WithMany("UpdatedByUsers")
                        .HasForeignKey("ChoiceQuestionId");

                    b.HasOne("Mooc.Model.Entity.ExamManagement.JudgementQuestion", null)
                        .WithMany("UpdatedByUsers")
                        .HasForeignKey("JudgementQuestionId");

                    b.HasOne("Mooc.Model.Entity.ExamManagement.Option", null)
                        .WithMany("UpdatedByUsers")
                        .HasForeignKey("OptionId");

                    b.HasOne("Mooc.Model.Entity.ExamManagement.ShortAnsQuestion", null)
                        .WithMany("UpdatedByUsers")
                        .HasForeignKey("ShortAnsQuestionId");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.ChoiceQuestion", b =>
                {
                    b.Navigation("Option");

                    b.Navigation("UpdatedByUsers");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.JudgementQuestion", b =>
                {
                    b.Navigation("UpdatedByUsers");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.Option", b =>
                {
                    b.Navigation("UpdatedByUsers");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.QuestionType", b =>
                {
                    b.Navigation("ChoiceQuestions");

                    b.Navigation("JudgementQuestions");

                    b.Navigation("ShortAnsQuestions");
                });

            modelBuilder.Entity("Mooc.Model.Entity.ExamManagement.ShortAnsQuestion", b =>
                {
                    b.Navigation("UpdatedByUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
